yarn sequelize db:migrate inicia o banco de dados
yarn sequelize migration:create --name=create-users cria uma nova tabela crie em sequencia 


belongs to many =  n pra n
belongs to = 1 pra 1
has many = 1 pra n
has one = 1 pra 1


chave estrangeira

id_foreign: {
   type: Sequelize.INTEGER,
   alowNull: false,
   references: {model: 'users', key: 'id'},
   onUpdate: 'CASCADE',
   onDelete: 'CASCADE'
}

class User extends Model {
    static init(connection){
        super.init({
            name: DataType.STRING
        }, {
            sequelize: connection
        })
    }

    static associate(models){
       this.belongsTo(models.user, {foreignkey: 'id_user', as: 'user to type'})
    }
}



Aqui e um join dentro de outro ou seja e so colocar os includes dentro da pesquisa
Office.findAll({
  include: [
    { 
      model: City,
      as: 'city',
      required : true , <----- Make sure will create inner join
      include: [
            {
                model: Country, 
                as: 'country' ,
                required : true , // <----- Make sure will create inner join
                where : { 'id' : 1 } // <-------- Here
            }]
    }
  ]
});

//import the models (as noted above use a db object)
//import express and instantiate your app object

app.get('/users', (req, res) => {
    db.users.findAll({
      include: [
        {
          model: db.posts,
          include: [
            {
              model: db.comments
            }
          ]
        }
      ]
    }).then(users => {
      const resObj = users.map(user => {

        //tidy up the user data
        return Object.assign(
          {},
          {
            user_id: user.id,
            username: user.username,
            role: user.role,
            posts: user.posts.map(post => {

              //tidy up the post data
              return Object.assign(
                {},
                {
                  post_id: post.id,
                  user_id: post.user_id,
                  content: post.content,
                  comments: post.comments.map(comment => {

                    //tidy up the comment data
                    return Object.assign(
                      {},
                      {
                        comment_id: comment.id,
                        post_id: comment.post_id,
                        commenter: comment.commenter_username,
                        commenter_email: comment.commenter_email,
                        content: comment.content
                      }
                    )
                  })
                }
                )
            })
          }
        )
      });
      res.json(resObj)
    });
  });
